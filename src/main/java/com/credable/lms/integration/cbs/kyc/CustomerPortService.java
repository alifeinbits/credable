package com.credable.lms.integration.cbs.kyc;

import jakarta.xml.ws.Service;
import jakarta.xml.ws.WebEndpoint;
import jakarta.xml.ws.WebServiceClient;
import jakarta.xml.ws.WebServiceFeature;

import javax.xml.namespace.QName;
import java.net.MalformedURLException;
import java.net.URL;

/**
 * This class was generated by Apache CXF 4.0.2
 * 2025-03-21T18:55:29.040+03:00
 * Generated source version: 4.0.2
 *
 */
@WebServiceClient(name = "CustomerPortService",
                  wsdlLocation = "https://kycapitest.credable.io/service/customerWsdl.wsdl",
                  targetNamespace = "http://credable.io/cbs/customer")
public class CustomerPortService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://credable.io/cbs/customer", "CustomerPortService");
    public final static QName CustomerPortSoap11 = new QName("http://credable.io/cbs/customer", "CustomerPortSoap11");
    static {
        URL url = null;
        try {
            url = new URL("https://kycapitest.credable.io/service/customerWsdl.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(CustomerPortService.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "https://kycapitest.credable.io/service/customerWsdl.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public CustomerPortService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public CustomerPortService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public CustomerPortService() {
        super(WSDL_LOCATION, SERVICE);
    }

    public CustomerPortService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public CustomerPortService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public CustomerPortService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns CustomerPort
     */
    @WebEndpoint(name = "CustomerPortSoap11")
    public CustomerPort getCustomerPortSoap11() {
        return super.getPort(CustomerPortSoap11, CustomerPort.class);
    }

    /**
     *
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CustomerPort
     */
    @WebEndpoint(name = "CustomerPortSoap11")
    public CustomerPort getCustomerPortSoap11(WebServiceFeature... features) {
        return super.getPort(CustomerPortSoap11, CustomerPort.class, features);
    }

}
